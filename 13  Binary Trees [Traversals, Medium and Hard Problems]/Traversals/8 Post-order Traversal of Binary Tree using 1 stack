#include <bits/stdc++.h>
using namespace std;
struct Node {
    int data;
    Node* left;
    Node* right;
    // Constructor to initialize
    // the node with a value
    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};


class Solution {
    public:
    vector<int> postOrder(Node* root) {
        if (root == NULL)return {};
        Node* curr = root;
        stack<Node*> st;
        vector<int> postOrder;

        while(curr != NULL || !st.empty()){
            if(curr != NULL) {
                st.push(curr);
                curr = curr -> left;
            } else{
                Node*temp = st.top()->right;
                if(temp == NULL) {
                    temp = st.top();
                    st.pop();
                    postOrder.push_back(temp->data);
                    while(!st.empty() && temp == st.top()->right) {
                        temp = st.top();
                        st.pop();
                        postOrder.push_back(temp->data);
                    }
                } else {
                    curr = temp;
                }
            }
        } 
        return postOrder;
    }
};

int main() {
    // Creating a binary tree
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);

    // Initializing the Solution class
    Solution sol;

    // Getting the preorder traversal
    vector<int> result = sol.postOrder(root);

    // Displaying the preorder traversal result
    cout << "postorder Traversal: ";
    for (int val : result) {
        cout << val << " ";
    }
    cout << endl;

    return 0;
}

// Output Postorder traversal: 4 5 2 3 1